/* Jagger.java */
/* Generated By:JavaCC: Do not edit this line. Jagger.java */
public class Jagger implements JaggerConstants {
    public static void main(String args[]) throws ParseException
    {
        Jagger parser = new Jagger(System.in);
        parser.mainloop();
    }

    // Main lopp: read expressions on a line until end of file.
    //     mainloop â†’ (expression <EOL>)* <EOF>
    static final public void mainloop() throws ParseException {Expression a;
        label_1:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case NUMBER:
                case 14:
                case 17:{
                    ;
                    break;
                }
                default:
                jj_la1[0] = jj_gen;
                break label_1;
            }
            a = expression();
            jj_consume_token(EOL);
            VisitorPrettyPrinter pp = new VisitorPrettyPrinter();
            VisitorEvaluator eval = new VisitorEvaluator();
            a.accept(pp);
            a.accept(eval);
            System.out.println(pp.prettyPrint()+"\n=>"+eval.evaluator());
        }
        jj_consume_token(0);
    }

    // Expression (comparison).
    // Ec -> E ('='E | '<>'E | '<'E | '>'E | '>='E | '<='E)*
    static final public Expression expression() throws ParseException {Expression a,b;
        a = expressionAddSub();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:{
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case 7:{
                        jj_consume_token(7);
                        b = expression();
                        a = new Equal(a,b);
                        break;
                    }
                    case 8:{
                        jj_consume_token(8);
                        b = expression();
                        a = new NotEqual(a,b);
                        break;
                    }
                    case 9:{
                        jj_consume_token(9);
                        b = expression();
                        a = new Less(a,b);
                        break;
                    }
                    case 10:{
                        jj_consume_token(10);
                        b = expression();
                        a = new More(a,b);
                        break;
                    }
                    case 11:{
                        jj_consume_token(11);
                        b = expression();
                        a = new MoreOrEqual(a,b);
                        break;
                    }
                    case 12:{
                        jj_consume_token(12);
                        b = expression();
                        a = new LessOrEqual(a,b);
                        break;
                    }
                    default:
                    jj_la1[1] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
            }
            default:
            jj_la1[2] = jj_gen;
            ;
        }
        {if ("" != null) return a;}
        throw new Error("Missing return statement in function");
    }

    // Expression (the axiom).
    // E -> T ('+'T | '-'T)*
    static final public Expression expressionAddSub() throws ParseException {Expression a,b;
        a = term();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 13:
            case 14:{
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case 13:{
                        jj_consume_token(13);
                        b = expressionAddSub();
                        a = new Add(a,b);
                        break;
                    }
                    case 14:{
                        jj_consume_token(14);
                        b = expressionAddSub();
                        a = new Substract(a,b);
                        break;
                    }
                    default:
                    jj_la1[3] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                break;
            }
            default:
            jj_la1[4] = jj_gen;
            ;
        }
        {if ("" != null) return a;}
        throw new Error("Missing return statement in function");
    }

    // Term.
    // T -> U ('*'U | '/'U)*
    static final public Expression term() throws ParseException {Expression a,b;
        a = unary();
        label_2:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case 15:
                case 16:{
                    ;
                    break;
                }
                default:
                jj_la1[5] = jj_gen;
                break label_2;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case 15:{
                    jj_consume_token(15);
                    b = factor();
                    a = new Multiply(a,b);
                    break;
                }
                case 16:{
                    jj_consume_token(16);
                    b = factor();
                    a = new Divide(a,b);
                    break;
                }
                default:
                jj_la1[6] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        {if ("" != null) return a;}
        throw new Error("Missing return statement in function");
    }

    //Unary.
    //U -> ('-'F) | F
    static final public Expression unary() throws ParseException {Expression a;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 14:{
                jj_consume_token(14);
                a = factor();
                {if ("" != null) return new Negative(a);}
                break;
            }
            case NUMBER:
            case 17:{
                a = factor();
                {if ("" != null) return new Positive(a);}
                break;
            }
            default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    // Factor of an expression.
    // F -> <NUMBER> | "(" E ")"
    static final public Expression factor() throws ParseException {Token t; Expression e;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NUMBER:{
                t = jj_consume_token(NUMBER);
                {if ("" != null) return new Constant(Float.parseFloat(t.toString()));}
                break;
            }
            case 17:{
                jj_consume_token(17);
                e = expression();
                jj_consume_token(18);
                {if ("" != null) return e;}
                break;
            }
            default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    static private boolean jj_initialized_once = false;
    /** Generated Token Manager. */
    static public JaggerTokenManager token_source;
    static SimpleCharStream jj_input_stream;
    /** Current token. */
    static public Token token;
    /** Next token. */
    static public Token jj_nt;
    static private int jj_ntk;
    static private int jj_gen;
    static final private int[] jj_la1 = new int[9];
    static private int[] jj_la1_0;
    static {
        jj_la1_init_0();
    }
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] {0x24010,0x1f80,0x1f80,0x6000,0x6000,0x18000,0x18000,0x24010,0x20010,};
    }

    /** Constructor with InputStream. */
    public Jagger(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public Jagger(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  ");
            System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("	   during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source = new JaggerTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /** Constructor. */
    public Jagger(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("	   during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new JaggerTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    static public void ReInit(java.io.Reader stream) {
        if (jj_input_stream == null) {
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
        } else {
            jj_input_stream.ReInit(stream, 1, 1);
        }
        if (token_source == null) {
            token_source = new JaggerTokenManager(jj_input_stream);
        }

        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /** Constructor with generated Token Manager. */
    public Jagger(JaggerTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("	   during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(JaggerTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /** Get the next Token. */
    static final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    static private int jj_ntk_f() {
        if ((jj_nt=token.next) == null)
            return (jj_ntk = (token.next=token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;

    /** Generate ParseException. */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[19];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 9; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1<<j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 19; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    static private boolean trace_enabled;

    /** Trace enabled. */
    static final public boolean trace_enabled() {
        return trace_enabled;
    }

    /** Enable tracing. */
    static final public void enable_tracing() {
    }

    /** Disable tracing. */
    static final public void disable_tracing() {
    }

}
