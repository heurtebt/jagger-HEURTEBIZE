/* Jagger.java */
/* Generated By:JavaCC: Do not edit this line. Jagger.java */
import java.io.*;
public class Jagger implements JaggerConstants {
    public static Scope initial_scope;
    public static void main(String args[]) throws ParseException, FileNotFoundException
    {
        File f = new File(args[0]);
        InputStream is = new FileInputStream(f);
        Jagger parser = new Jagger(is);
        Scope initial_scope = new Scope();
        parser.mainloop();
    }

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOF>)* <EOF>
  static final public void mainloop() throws ParseException {Expression a;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LET:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      a = scope();
      jj_consume_token(0);
System.out.println("\nPretty Print :-------------\n\n");
        VisitorPrettyPrinter pp = new VisitorPrettyPrinter();
        a.accept(pp);
        System.out.println("\n\n---------------------------\nBinder :-------------\n\n");
        VisitorBinder vb = new VisitorBinder();
        a.accept(vb);
        System.out.println("\n\n---------------------------\nRenamer :-------------\n\n");
        VisitorRenamer vr = new VisitorRenamer();
        a.accept(vr);
        System.out.println("\n\n---------------------------\nType Checker :-------------\n\n");
        VisitorTypeChecker tp = new VisitorTypeChecker();
        a.accept(tp);
        if(!tp.hasError()){
             System.out.println("OK\n\n---------------------------\nEvaluator :-------------\n\n");
                               VisitorEvaluator eval = new VisitorEvaluator();
                         a.accept(eval);
        }else{
            System.out.println("The Type Checker found an error!\n\n---------------------------");
                    }
    }
    jj_consume_token(0);
}

//Scope
//S -> let (D)* in S(","S)*+ end
  static final public Expression scope() throws ParseException {Expression e; Scope s= new Scope(); initial_scope = s;
    jj_consume_token(LET);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      declaration();
    }
    jj_consume_token(IN);
    e = statement();
s.inst.add(e);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 22:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(22);
      e = statement();
s.inst.add(e);
    }
    jj_consume_token(END);
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

//Declaration
//D -> var VARNAME := (Comp|ITE)
  static final public void declaration() throws ParseException {Token t; Expression e;
    jj_consume_token(VAR);
    t = jj_consume_token(VARNAME);
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      e = ifthenelse();
      break;
      }
    case NUMBER:
    case STRING:
    case VARNAME:
    case 23:
    case 32:{
      e = comparison();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
initial_scope.addDeclaration(t.toString(),new VariableDecl(t.toString(),e));
}

//For
// F -> <FOR> S <TO> S <DO> "("S(,S)*")"|S
  static final public Expression forstatement() throws ParseException {Token t; Expression e,start,end; While w; Scope s=new Scope(); initial_scope=s;
    jj_consume_token(FOR);
    t = jj_consume_token(VARNAME);
    jj_consume_token(ASSIGN);
    start = statement();
    jj_consume_token(TO);
    end = statement();
s.addDeclaration(t.toString(),new VariableDecl(t.toString(),start));
      w = new While(new LessOrEqual(new Variable(t.toString()),end));
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:{
      jj_consume_token(23);
      e = statement();
w.inst.add(e);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 22:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(22);
        e = statement();
w.inst.add(e);
      }
      jj_consume_token(24);
      break;
      }
    case NUMBER:
    case STRING:
    case IF:
    case PRINT:
    case LET:
    case WHILE:
    case FOR:
    case VARNAME:
    case 32:{
      e = statement();
w.inst.add(e);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
w.inst.add(new Assignment(new Variable(t.toString()),new Add(
                      new Variable(t.toString()),new Constant(1))));
      s.inst.add(w);
      {if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

//While
// W -> <WHILE> Comp <DO> "("S(,S)*")"|S
  static final public Expression whilestatement() throws ParseException {Expression c,e; While w;
    jj_consume_token(WHILE);
    c = comparison();
w= new While(c);
    jj_consume_token(DO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:{
      jj_consume_token(23);
      e = statement();
w.inst.add(e);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 22:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        jj_consume_token(22);
        e = statement();
w.inst.add(e);
      }
      jj_consume_token(24);
      break;
      }
    case NUMBER:
    case STRING:
    case IF:
    case PRINT:
    case LET:
    case WHILE:
    case FOR:
    case VARNAME:
    case 32:{
      e = statement();
w.inst.add(e);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return w;}
    throw new Error("Missing return statement in function");
}

//Assignment
//A -> <VARNAME> := (Comp|ITE)
  static final public Expression assignment() throws ParseException {Token t; Expression e;
    t = jj_consume_token(VARNAME);
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:
    case STRING:
    case VARNAME:
    case 23:
    case 32:{
      e = comparison();
      break;
      }
    case IF:{
      e = ifthenelse();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Assignment(new Variable(t.toString()),e);}
    throw new Error("Missing return statement in function");
}

//Statement
//S -> E
  static final public Expression statement() throws ParseException {Expression e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:{
      e = print();
      break;
      }
    case IF:{
      e = ifthenelse();
      break;
      }
    case VARNAME:{
      e = assignment();
      break;
      }
    case NUMBER:
    case STRING:
    case 23:
    case 32:{
      e = comparison();
      break;
      }
    case LET:{
      e = scope();
      break;
      }
    case WHILE:{
      e = whilestatement();
      break;
      }
    case FOR:{
      e = forstatement();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

//Print
//P -> 'print(' Comp ')'
  static final public Expression print() throws ParseException {Expression a;
    jj_consume_token(PRINT);
    jj_consume_token(23);
    a = comparison();
    jj_consume_token(24);
{if ("" != null) return new Print(a);}
    throw new Error("Missing return statement in function");
}

//If-Then-Else
//ITE -> 'if' (Comp|ITE) 'then' S 'else' S
  static final public Expression ifthenelse() throws ParseException {Expression a,b,c;
    jj_consume_token(IF);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      a = ifthenelse();
      break;
      }
    case NUMBER:
    case STRING:
    case VARNAME:
    case 23:
    case 32:{
      a = comparison();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(THEN);
    b = statement();
    jj_consume_token(ELSE);
    c = statement();
{if ("" != null) return new IfThenElse(a,b,c);}
    throw new Error("Missing return statement in function");
}

// Comparison
// Comp -> E ('='E | '<>'E | '<'E | '>'E | '>='E | '<='E)*
  static final public Expression comparison() throws ParseException {Expression a,b;
    a = AddSub();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 25:{
        jj_consume_token(25);
        b = comparison();
a = new Equal(a,b);
        break;
        }
      case 26:{
        jj_consume_token(26);
        b = comparison();
a = new NotEqual(a,b);
        break;
        }
      case 27:{
        jj_consume_token(27);
        b = comparison();
a = new Less(a,b);
        break;
        }
      case 28:{
        jj_consume_token(28);
        b = comparison();
a = new More(a,b);
        break;
        }
      case 29:{
        jj_consume_token(29);
        b = comparison();
a = new MoreOrEqual(a,b);
        break;
        }
      case 30:{
        jj_consume_token(30);
        b = comparison();
a = new LessOrEqual(a,b);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

// AddSub
// E -> T ('+'T | '-'T)*
  static final public Expression AddSub() throws ParseException {Expression a,b;
    a = term();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 31:
    case 32:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 31:{
        jj_consume_token(31);
        b = AddSub();
a = new Add(a,b);
        break;
        }
      case 32:{
        jj_consume_token(32);
        b = AddSub();
a = new Substract(a,b);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

// Term.
// T -> U ('*'U | '/'U)*
  static final public Expression term() throws ParseException {Expression a,b;
    a = unary();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 33:
      case 34:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 33:{
        jj_consume_token(33);
        b = factor();
a = new Multiply(a,b);
        break;
        }
      case 34:{
        jj_consume_token(34);
        b = factor();
a = new Divide(a,b);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

//Unary.
//U -> ('-'F) | F
  static final public Expression unary() throws ParseException {Expression a;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 32:{
      jj_consume_token(32);
      a = factor();
{if ("" != null) return new Negative(a);}
      break;
      }
    case NUMBER:
    case STRING:
    case VARNAME:
    case 23:{
      a = factor();
{if ("" != null) return a;}
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Factor of an expression.
// F -> <VARNAME>|<NUMBER>|<STRING>| "(" E ")"
  static final public Expression factor() throws ParseException {Token t; Expression e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARNAME:{
      t = jj_consume_token(VARNAME);
{if ("" != null) return new Variable(t.toString());}
      break;
      }
    case NUMBER:{
      t = jj_consume_token(NUMBER);
{if ("" != null) return new Constant(Float.parseFloat(t.toString()));}
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
{if ("" != null) return new ConstantString(t.toString());}
      break;
      }
    case 23:{
      jj_consume_token(23);
      e = comparison();
      jj_consume_token(24);
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JaggerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1000,0x8000,0x400000,0xa00160,0x400000,0xaa1960,0x400000,0xaa1960,0xa00160,0xaa1960,0xa00160,0x7e000000,0x7e000000,0x80000000,0x80000000,0x0,0x0,0xa00060,0xa00060,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x6,0x6,0x1,0x0,};
	}

  /** Constructor with InputStream. */
  public Jagger(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Jagger(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JaggerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Jagger(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new JaggerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JaggerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Jagger(JaggerTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JaggerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[35];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 19; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 35; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
