// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)

import java.io.*;
public class Jagger
{
    public static Scope initial_scope;
    public static void main(String args[]) throws ParseException, FileNotFoundException
    {
        File f = new File(args[0]);
        InputStream is = new FileInputStream(f);
        Jagger parser = new Jagger(is);
        Scope initial_scope = new Scope();
        parser.mainloop();
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" | "\n" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|  	<STRING: "\""(["a"-"z","A"-"Z","_","0"-"9"])*"\"">// A string containing any alphanumerical character.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < IF: "if" >                              // If.
|   < THEN: "then" >                          // Then.
|   < ELSE: "else" >                          // Else.
|   < PRINT: "print" >                         // Print keyword.
|   < LET: "let" >                             //Let.
|   < IN: "in" >                               //In.
|   < END: "end" >                             //End.
|   < VAR: "var" >                             //Var.
|   <ASSIGN: ":=" >                           //Assign.
|   <WHILE: "while">                          //While.
|   <DO: "do">                                //Do.
|   < VARNAME: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*>          //VariableId.
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOF>)* <EOF>
void mainloop():
{ Expression a; }
{
    (
      a=scope() <EOF>
      {
        System.out.println("\nPretty Print :-------------\n\n");
        VisitorPrettyPrinter pp = new VisitorPrettyPrinter();
        a.accept(pp);
        System.out.println("\n\n---------------------------\nBinder :-------------\n\n");
        VisitorBinder vb = new VisitorBinder();
        a.accept(vb);
        System.out.println("\n\n---------------------------\nRenamer :-------------\n\n");
        VisitorRenamer vr = new VisitorRenamer();
        a.accept(vr);
        System.out.println("\n\n---------------------------\nType Checker :-------------\n\n");
        VisitorTypeChecker tp = new VisitorTypeChecker();
        a.accept(tp);
        if(!tp.hasError()){
             System.out.println("OK\n\n---------------------------\nEvaluator :-------------\n\n");
			       VisitorEvaluator eval = new VisitorEvaluator();
		         a.accept(eval);
        }else{
            System.out.println("The Type Checker found an error!\n\n---------------------------");
		    }
    }
    )*
    <EOF>
}


//Scope
//S -> let (D)* in S(","S)*+ end
Expression scope():
{Expression e; Scope s= new Scope(); initial_scope = s;}
{
    <LET> (declaration())*
    <IN> e=statement(){s.inst.add(e);}
         ("," e=statement(){s.inst.add(e);})*
    <END> {return s;}
}


//Declaration
//D -> var VARNAME := (Comp|ITE)
void declaration():
{Token t; Expression e;}
{
    <VAR> t=<VARNAME> <ASSIGN>
    (e=ifthenelse()|e=comparison())
    {initial_scope.addDeclaration(t.toString(),new VariableDecl(t.toString(),e));}
}


//While
// W -> <WHILE> Comp <DO> S(,S)*
Expression whilestatement():
{Expression c,e; While w;}
{
    <WHILE> c=comparison() {w= new While(c);} <DO>
    (
        ("(" e=statement(){w.inst.add(e);} ("," e=statement(){w.inst.add(e);})*")")
      | e=statement(){w.inst.add(e);}
    ){return w;}
}


//Assignment
//A -> <VARNAME> := (Comp|ITE)
Expression assignment():
{Token t; Expression e;}
{
    t=<VARNAME> <ASSIGN>(e=comparison()|e=ifthenelse())
    {return new Assignment(new Variable(t.toString()),e);}
}


//Statement
//S -> E
Expression statement():
{Expression e;}
{
  (
    e=print()
  | e=ifthenelse()
  | e=assignment()
  | e=comparison()
  | e=scope()
  | e=whilestatement()
  ){return e;}
}


//Print
//P -> 'print(' Comp ')'
Expression print():
{Expression a;}
{
    <PRINT> "(" a=comparison() ")" { return new Print(a); }
}


//If-Then-Else
//ITE -> 'if' (Comp|ITE) 'then' S 'else' S
Expression ifthenelse():
{Expression a,b,c;}
{
    <IF> (a=ifthenelse()|a=comparison())
    <THEN> b=statement()
    <ELSE> c=statement()
    { return new IfThenElse(a,b,c); }
}


// Comparison
// Comp -> E ('='E | '<>'E | '<'E | '>'E | '>='E | '<='E)*
Expression comparison():
{ Expression a,b; }
{
    a=AddSub()
    (
      "=" b=comparison() { a = new Equal(a,b); }
    | "<>" b=comparison() { a = new NotEqual(a,b); }
    | "<" b=comparison() { a = new Less(a,b); }
    | ">" b=comparison() { a = new More(a,b); }
    | ">=" b=comparison() { a = new MoreOrEqual(a,b); }
    | "<=" b=comparison() { a = new LessOrEqual(a,b); }
    )? { return a; }
}


// AddSub
// E -> T ('+'T | '-'T)*
Expression AddSub():
{ Expression a,b; }
{
    a=term()
    (
      "+" b=AddSub() { a = new Add(a,b); }
    | "-" b=AddSub() { a = new Substract(a,b); }
    )?{ return a; }
}


// Term.
// T -> U ('*'U | '/'U)*
Expression term():
{ Expression a,b; }
{
    a=unary()
    (
      "*" b=factor() { a = new Multiply(a,b); }
    | "/" b=factor() { a = new Divide(a,b); }
    )* { return a; }
}


//Unary.
//U -> ('-'F) | F
Expression unary():
{Expression a;}
{
    "-" a=factor() { return new Negative(a); }
    | a= factor(){ return a; }
}


// Factor of an expression.
// F -> <VARNAME>|<NUMBER>|<STRING>| "(" E ")"
Expression factor():
{ Token t; Expression e; }
{
      t=<VARNAME> {return new Variable(t.toString());}
    | t=<NUMBER> { return new Constant(Float.parseFloat(t.toString())); }
    | t=<STRING> { return new ConstantString(t.toString()); }
    | "(" e=comparison() ")" { return e; }
}
