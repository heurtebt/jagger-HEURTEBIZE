// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)

import java.io.*;
public class Jagger
{
    public static Scope initial_scope;
    public static void main(String args[]) throws ParseException, FileNotFoundException, IOException
    {
        File f = new File(args[0]);
        InputStream is = new FileInputStream(f);
        Jagger parser = new Jagger(is);
        parser.mainloop();
        is.close();
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" | "\n" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|  	<STRING: "\""(~["\""])*"\"" >             // A string.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < IF: "if" >                              // If.
|   < THEN: "then" >                          // Then.
|   < ELSE: "else" >                          // Else.
|   < PRINT: "print" >                        // Print keyword.
|   < LET: "let" >                            //Let.
|   < IN: "in" >                              //In.
|   < END: "end" >                            //End.
|   < VAR: "var" >                            //Var.
|   <ASSIGN: ":=" >                           //Assign.
|   <WHILE: "while">                          //While.
|   <DO: "do">                                //Do.
|   <FOR: "for">                              //For.
|   <TO: "to">                                //To.
|   < VARNAME: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*>          //VariableId.
}

// Main loop: read expressions on a file until the end.
//     mainloop â†’ expression <EOF>
void mainloop():
{ Expression a; }
{

      a=instructions() <EOF>
      {
        System.out.println("\nPretty Print :-------------\n\n");
        VisitorPrettyPrinter pp = new VisitorPrettyPrinter();
        a.accept(pp);
        System.out.println("\n\n---------------------------\nBinder :-------------\n\n");
        VisitorBinder vb = new VisitorBinder();
        a.accept(vb);
        System.out.println("\n\n---------------------------\nRenamer :-------------\n\n");
        VisitorRenamer vr = new VisitorRenamer();
        a.accept(vr);
        System.out.println("\n\n---------------------------\nType Checker :-------------\n\n");
        VisitorTypeChecker tp = new VisitorTypeChecker();
        a.accept(tp);
        if(!(vb.hasError()||tp.hasError())){
             System.out.println("OK\n\n---------------------------\nEvaluator :-------------\n\n");
			       VisitorEvaluator eval = new VisitorEvaluator();
		         a.accept(eval);
        }else{
            System.out.println("\n\nError(s) has been found, the program cannot be evaluated.\n\n---------------------------");
		    }
    }
}


//Instruction
//I -> S (","S)*
Instructions instructions():
{Expression e;Instructions i = new Instructions();}
{
    e=statement(){i.inst.add(e);}
     ("," e=statement(){i.inst.add(e);})*
    {return i;}
}


//Statement
//S -> P|ITE|A|Scope|W|F
Expression statement():
{Expression e;}
{
  (
    e=print()
  | e=ifthenelse()
  | e=assignment()
  | e=scope()
  | e=whilestatement()
  | e=forstatement()
  ){return e;}
}


//Scope
//Scope -> let (D)* in I end
Expression scope():
{Expression e; Instructions i; Scope s= new Scope(); initial_scope = s;}
{
    <LET> (declaration())*
    <IN>  i=instructions(){s.inst=i;}
    <END> {return s;}
}


//Declaration
//D -> var VARNAME := (Comp|ITE)
void declaration():
{Token t; Expression e;}
{
    <VAR> t=<VARNAME> <ASSIGN>
    (e=ifthenelse()|e=comparison())
    {initial_scope.addDeclaration(t.toString(),new VariableDecl(t.toString(),e));}
}


//Assignment
//A -> Comp (:= (Comp|ITE))?
Expression assignment():
{Token t; Expression e,v;}
{
    v=comparison()
    (<ASSIGN>(e=comparison()|e=ifthenelse()){return new Assignment((Variable)v,e);})?
    {return v;}
}


//For
// F -> <FOR> S <TO> S <DO> "("I")"|S
Expression forstatement():
{Token t; Expression e,start,end;Instructions iw,is; While w; Scope s=new Scope(); initial_scope=s;}
{
    <FOR>
    t=<VARNAME> <ASSIGN> start=statement()
    <TO> end=statement()
    {
      s.addDeclaration(t.toString(),new VariableDecl(t.toString(),start));
      w = new While(new LessOrEqual(new Variable(t.toString()),end));
    }
    <DO>(
        (("(" iw=instructions() ")")
      | e=statement(){iw = new Instructions(); iw.inst.add(e);})
      )
    {
      iw.inst.add(new Assignment(new Variable(t.toString()),new Add(
                      new Variable(t.toString()),new Constant(1))));
      w.inst=iw;
      is = new Instructions(); is.inst.add(w);
      s.inst=is;
      return s;
    }
}



//While
// W -> <WHILE> Comp <DO> "("I")"|S
Expression whilestatement():
{Expression c,e; Instructions i; While w;}
{
    <WHILE> c=comparison() {w= new While(c);} <DO>
    (
        (("(" i=instructions() ")")
      | e=statement(){i = new Instructions(); i.inst.add(e);}){w.inst=i;}
    ){return w;}
}


//Print
//P -> 'print(' Comp ')'
Expression print():
{Expression a;}
{
    <PRINT> "(" a=comparison() ")" { return new Print(a); }
}


//If-Then-Else
//ITE -> 'if' (Comp|ITE) 'then' S 'else' S
Expression ifthenelse():
{Expression a,b,c;}
{
    <IF> (a=ifthenelse()|a=comparison())
    <THEN> b=statement()
    <ELSE> c=statement()
    { return new IfThenElse(a,b,c); }
}


// Comparison
//Comp -> E ('='Comp | '<>'Comp | '<'Comp | '>'Comp | '>='Comp | '<='Comp)*
Expression comparison():
{ Expression a,b; }
{
    a=AddSub()
    (
      "=" b=comparison() { a = new Equal(a,b); }
    | "<>" b=comparison() { a = new NotEqual(a,b); }
    | "<" b=comparison() { a = new Less(a,b); }
    | ">" b=comparison() { a = new More(a,b); }
    | ">=" b=comparison() { a = new MoreOrEqual(a,b); }
    | "<=" b=comparison() { a = new LessOrEqual(a,b); }
    )? { return a; }
}


// AddSub
// E -> T ('+'T | '-'T)*
Expression AddSub():
{ Expression a,b; }
{
    a=term()
    (
      "+" b=AddSub() { a = new Add(a,b); }
    | "-" b=AddSub() { a = new Substract(a,b); }
    )?{ return a; }
}


// Term.
// T -> U ('*'U | '/'U)*
Expression term():
{ Expression a,b; }
{
    a=unary()
    (
      "*" b=factor() { a = new Multiply(a,b); }
    | "/" b=factor() { a = new Divide(a,b); }
    )* { return a; }
}


//Unary.
//U -> ('-'F) | ('+'F) | F
Expression unary():
{Expression a;}
{
    "-" a=factor() { return new Negative(a); }
    | "+" a=factor() {return new Positive(a);}
    | a= factor(){ return a; }
}


// Factor of an expression.
// F -> <VARNAME>|<NUMBER>|<STRING>| "(" Comp ")"
Expression factor():
{ Token t; Expression e; }
{
      t=<VARNAME> {return new Variable(t.toString());}
    | t=<NUMBER> { return new Constant(Float.parseFloat(t.toString())); }
    | t=<STRING> { return new ConstantString(t.toString()); }
    | "(" e=comparison() ")" { return e; }
}
